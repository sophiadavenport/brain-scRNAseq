use_conda=True

DE_BASE_DIR=config["de_base_dir"]
FULL_GENE_LIST=config["full_gene_list"]
datasets={"SZ": config["sz_adata_path"], "BD": config["bd_adata_path"], "MS": config["ms_adata_path"], "AD": config["ad_adata_path"]}
celltypes=['Oligodendrocytes', 'Microglia', 'OPCs_COPs', 'Astrocytes', 'Excitatory_neurons', 'Vascular_Cells', 'Inhibitory_neurons']

rule all:
    input:
        expand("results/{dataset}_{celltype}/{dataset}__{celltype}_teststats.csv", dataset=datasets.keys(), celltype=celltypes), 
        expand("results/{dataset}__{celltype}/{dataset}__{celltype}_individualmatrix.csv", dataset=datasets.keys(), celltype=celltypes), 
        expand("results/{dataset}__{celltype}/module_geneexp_dist/{dataset}_KSstats.csv", celltype=celltypes, dataset=datasets.keys()), 
        expand("results/{dataset}__{celltype}/module_geneexp_dist/{dataset}_module_avg_abslogFC.csv", celltype=celltypes, dataset=datasets.keys()),
        expand("results/{dataset}__{celltype}/DEG_mod_association/{dataset}_fisherstats.csv", celltype=celltypes, dataset=datasets.keys())

rule cscore:
    input:
        adata=lambda wildcards: datasets[wildcards.dataset]
    output:
        coexpr="results/{dataset}_{celltype}/{dataset}__{celltype}_coexpr.csv",pvals="results/{dataset}_{celltype}/{dataset}__{celltype}_pvals.csv",teststats="results/{dataset}_{celltype}/{dataset}__{celltype}_teststats.csv",genes="results/{dataset}_{celltype}/{dataset}__{celltype}_genes.csv"
    threads: 2
    params:
        celltype_col="Celltype_Class"
    conda:
        "envs/cscore_env.yaml"
    shell:
        """
        python cscore.py --adata {input.adata} --celltype_col {params.celltype_col} --current_celltype {wildcards.celltype} --output_prefix results/{wildcards.dataset}_{wildcards.celltype}/{wildcards.dataset}__{wildcards.celltype}
        """

rule wgcna_go:
    input:
        coexpr="results/{dataset}_{celltype}/{dataset}__{celltype}_coexpr.csv",pvals="results/{dataset}_{celltype}/{dataset}__{celltype}_pvals.csv",genes="results/{dataset}_{celltype}/{dataset}__{celltype}_genes.csv"
    output:
        modules="results/{dataset}__{celltype}/modules/{dataset}_modules.csv"
    conda:
        "envs/wgcnago_env.yaml"
    shell:
        """
        Rscript wgcna_go.R {input.coexpr} {input.pvals} {input.genes} results/{wildcards.dataset}__{wildcards.celltype}/modules
        """

rule individual_matrix_exp:
    input:
        adata=lambda wildcards: datasets[wildcards.dataset], modules="results/{dataset}__{celltype}/modules/{dataset}_modules.csv"
    output:
        matrix="results/{dataset}__{celltype}/{dataset}__{celltype}_individualmatrix.csv"
    threads: 4
    params:
        celltype_col="Celltype_Class"
    conda:
        "envs/cscore_env.yaml"
    shell:
        """
        python indv_module_matrix.py --adata {input.adata} --modules {input.modules} --matrix {output.matrix} --current_celltype {wildcards.celltype} --celltype_col {params.celltype_col}
        """

rule module_distributions:
    input:
        modules="results/{dataset}__{celltype}/modules/{dataset}_modules.csv", de_folder=DE_BASE_DIR
    output:
        ks="results/{dataset}__{celltype}/module_geneexp_dist/{dataset}_KSstats.csv", avg_logfc="results/{dataset}__{celltype}/module_geneexp_dist/{dataset}_module_avg_abslogFC.csv"
    threads: 8
    params:
        number_dist=100
    conda:
        "envs/plotting_env.yaml"
    shell:
        """
        python module_logFC_distribution.py --celltype {wildcards.celltype} --dataset {wildcards.dataset} --modules_csv_path {input.modules} --de_folder {input.de_folder} --ks_csv_path {output.ks} --avg_logfc_csv_path {output.avg_logfc} --number_dist {params.number_dist}
        """

rule DEG_module_association:
    input:
        modules="results/{dataset}__{celltype}/modules/{dataset}_modules.csv", de_folder=DE_BASE_DIR, background_genes=FULL_GENE_LIST
    output:
        fisher="results/{dataset}__{celltype}/DEG_mod_association/{dataset}_fisherstats.csv"
    threads: 8
    params:
        deg_cutoff=0.05
    conda:
        "envs/plotting_env.yaml"
    shell:
        """
        python DEG_module_overlap.py --celltype {wildcards.celltype} --dataset {wildcards.dataset} --modules_csv_path {input.modules} --de_folder {input.de_folder} --background_genes {input.background_genes} --fisher_csv_path {output.fisher} --deg_cutoff {params.deg_cutoff}
        """